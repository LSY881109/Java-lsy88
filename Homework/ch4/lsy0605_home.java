package Homework.ch4;


// ---

// ### 1. `Car_model` 클래스
// **무엇인가요?**: 한 대의 자동차 정보를 저장하는 클래스 (예: 소나타 자동차의 정보).

// **어디에 있나요?**: `Homework.lsy0605.ch4` 폴더

// **정보 (필드)**:
// - `model`: 자동차 이름 (예: "소나타")
// - `price`: 가격 (예: "3000만원")
// - `company`: 제조사 (예: "현대")
// - `year`: 연식 (예: "2022")
// - `regdate`: 등록일 (예: "2025-06-05")

// **기능 (메서드)**:
// - **생성자**: `Car_model(model, price, company, year, regdate)`
// - 자동차 정보를 받아 저장.
// - **showInfo()**: 자동차 정보를 화면에 출력 (예: 모델명: 소나타, 가격: 3000만원, ...).
// - **getModel()**: 자동차 이름을 반환 (검색용).
// - **getPrice()**: 가격을 반환 (검색용).

// **쉽게 이해**:
// - 이 클래스는 자동차 한 대를 "상자"처럼 생각하면 됩니다. 상자 안에 이름, 가격, 제조사, 연식, 등록일을 넣고, 필요할 때 꺼내서
// 보여주거나 검색할 수 있어요.

// ---

// ### 2. `Car` 클래스
// **무엇인가요?**: 여러 자동차(`Car_model`)를 관리하는 클래스. 추가, 조회, 수정, 삭제, 검색 같은 기능을 메뉴로 제공.

// **어디에 있나요?**: `Homework.lsy0605.ch4` 폴더

// **정보 (필드)**:
// - `MAX_USERS = 100`: 최대 100대의 자동차를 저장.
// - `Car_models`: 100대의 자동차를 저장하는 배열 (상자 100개).
// - `userCount`: 현재 저장된 자동차 수 (예: 5대면 5).

// **기능 (메서드)**:
// - **addUser(Scanner)**: 새 자동차 정보를 입력받아 추가.
// - 예: "소나타", "3000만원", "현대", "2022" 입력 → 새 자동차 저장.
// - **viewUsers()**: 저장된 모든 자동차 정보를 출력.
// - 예: 등록된 자동차 없으면 "없습니다" 출력.
// - **updateUser(Scanner)**: 특정 자동차 정보 수정.
// - 예: 0번 자동차의 모델명을 "그랜저"로 변경.
// - **deleteUser(Scanner)**: 특정 자동차 삭제.
// - 예: 0번 자동차 삭제 → 나머지 자동차 앞으로 이동.
// - **addDummyUsers()**: 연습용 자동차 5대 추가.
// - 예: "더미자동차1", "더미자동차2" 같은 데이터.
// - **searchUser(Scanner)**: 이름이나 가격으로 자동차 검색.
// - 예: "소나타" 입력 → 소나타 정보 출력.
// - **ex_user_ui(Scanner)**: 메뉴 화면 제공.
// - 1: 추가, 2: 조회, 3: 수정, 4: 삭제, 5: 더미 추가, 6: 검색, 0: 종료.

// **쉽게 이해**:
// - 이 클래스는 자동차를 관리하는 "사서" 같은 역할이에요. 자동차 상자를 추가, 확인, 수정, 삭제하거나, 원하는 자동차를 찾아줍니다.
// 메뉴를 통해 쉽게 명령을 내릴 수 있어요.

// ---

// ### 3. `Car_main` 클래스
// **무엇인가요?**: 프로그램을 시작하는 클래스.

// **어디에 있나요?**: `Homework.lsy0605.ch4` 폴더

// **기능 (메서드)**:
// - **main(String[] args)**:
// - 사용자 입력을 받을 `Scanner`를 만들고, `Car` 클래스의 메뉴(`ex_user_ui`)를 실행.
// - 끝나면 `Scanner`를 닫아 메모리 정리.

// **쉽게 이해**:
// - 이 클래스는 프로그램의 "시작 버튼"이에요. 버튼을 누르면 `Car` 클래스의 메뉴가 나타나고, 사용자가 원하는 작업을 할 수 있게
// 해줍니다.

// ---

// ### 전체 그림
// - **어떻게 동작하나요?**:
// 1. `Car_main`이 프로그램을 시작하고 메뉴를 띄움.
// 2. `Car`가 메뉴를 통해 자동차를 추가, 조회, 수정, 삭제, 검색, 더미 데이터 추가를 관리.
// 3. `Car_model`은 한 대의 자동차 정보를 저장하고 보여주는 역할.
// - **비슷한 점**: `Member` 클래스와 비슷한 구조(정보 저장, 출력, 검색)를 자동차에 맞게 바꾼 느낌.
// - **특별한 점**: 최대 100대까지 저장 가능, `DateUtil`로 등록일을 자동 설정.

// **학습 팁**:
// - 코드를 따라 쳐보며 각 메서드가 언제 호출되는지 확인하세요.
// - `Scanner`로 입력할 때 잘못된 입력(예: 숫자 대신 문자)을 넣어보고 어떤 문제가 생기는지 보세요.
// - 이름을 `Car_models` 대신 `carModels`로, `userCount` 대신 `carCount`로 바꾸면 더 깔끔해요.
